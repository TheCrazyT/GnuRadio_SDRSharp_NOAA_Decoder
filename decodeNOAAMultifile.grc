<?xml version='1.0' encoding='utf-8'?>
<?grc format='1' created='3.7.13'?>
<flow_graph>
  <timestamp>Tue Jan  8 18:32:39 2019</timestamp>
  <block>
    <key>options</key>
    <param>
      <key>author</key>
      <value></value>
    </param>
    <param>
      <key>window_size</key>
      <value>1400,800</value>
    </param>
    <param>
      <key>category</key>
      <value>[GRC Hier Blocks]</value>
    </param>
    <param>
      <key>comment</key>
      <value>Application runs and stops automatically.</value>
    </param>
    <param>
      <key>description</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 8)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>generate_options</key>
      <value>no_gui</value>
    </param>
    <param>
      <key>hier_block_src_path</key>
      <value>.:</value>
    </param>
    <param>
      <key>id</key>
      <value>top_block</value>
    </param>
    <param>
      <key>max_nouts</key>
      <value>0</value>
    </param>
    <param>
      <key>qt_qss_theme</key>
      <value></value>
    </param>
    <param>
      <key>realtime_scheduling</key>
      <value></value>
    </param>
    <param>
      <key>run_command</key>
      <value>{python} -u {filename}</value>
    </param>
    <param>
      <key>run_options</key>
      <value>run</value>
    </param>
    <param>
      <key>run</key>
      <value>True</value>
    </param>
    <param>
      <key>sizing_mode</key>
      <value>fixed</value>
    </param>
    <param>
      <key>thread_safe_setters</key>
      <value></value>
    </param>
    <param>
      <key>title</key>
      <value></value>
    </param>
    <param>
      <key>placement</key>
      <value>(0,0)</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(624, 156)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>BW</value>
    </param>
    <param>
      <key>value</key>
      <value>48000</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(816, 156)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>image_height</value>
    </param>
    <param>
      <key>value</key>
      <value>1400</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(704, 156)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>image_width</value>
    </param>
    <param>
      <key>value</key>
      <value>2080</value>
    </param>
  </block>
  <block>
    <key>analog_const_source_x</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>const</key>
      <value>1</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(24, 516)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>analog_const_source_x_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>type</key>
      <value>int</value>
    </param>
  </block>
  <block>
    <key>blocks_complex_to_mag</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(736, 472)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_complex_to_mag_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_float_to_char</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(160, 452)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_float_to_char_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>scale</key>
      <value>1</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_float_to_complex</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1080, 520)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_float_to_complex_1</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_float_to_uchar</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(328, 456)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_float_to_uchar_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>blocks_int_to_float</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(216, 516)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_int_to_float_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>scale</key>
      <value>1</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_keep_m_in_n</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1112, 236)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_keep_m_in_n_0</value>
    </param>
    <param>
      <key>m</key>
      <value>4160</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>n</key>
      <value>48000</value>
    </param>
    <param>
      <key>type</key>
      <value>int</value>
    </param>
    <param>
      <key>offset</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>blocks_multiply_const_vxx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>const</key>
      <value>255</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(512, 452)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_multiply_const_vxx_0_1</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_multiply_const_vxx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>Change this to amplify signal.</value>
    </param>
    <param>
      <key>const</key>
      <value>1</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(544, 284)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_multiply_const_vxx_0_1_0</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('To multiple bmp files', 'blk', [('max_num_files', '100'), ('width', '800'), ('height', '600'), ('folder', "''"), ('filename', "''")], [('0', 'byte', 1), ('1', 'byte', 1), ('2', 'int', 1)], [], 'arguments to this function show up as parameters in GRC', ['filename', 'folder', 'height', 'width'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>import numpy as np
from gnuradio import gr
import scipy.misc
import os
import atexit

WORK_CALLED_PRODUCE=-2
WORK_DONE=-1

class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block

    def __init__(self,max_num_files=100,width=800,height=600,folder="",filename=""):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='To multiple bmp files',  
            in_sig=[np.byte,np.byte,np.int],
            out_sig=[]
        )
        self.width = width
        self.height = height
        self.stopat = width*height
        self.folder = folder
        self.filename = filename
        self.img = np.zeros(shape=(max_num_files,width*height),dtype=np.uint8)
        self.pos = np.zeros(shape=(max_num_files,),dtype=np.int)
        self.wroteFile = np.zeros(shape=(max_num_files,), dtype=bool)
        self.hasData = np.zeros(shape=(max_num_files,), dtype=bool)
        atexit.register(self.finalize)

    def writeFile(self,s):
        self.wroteFile[s] = True
        img = np.maximum(np.minimum(self.img[s],np.ones(self.img[s].shape)*255),np.zeros(self.img[s].shape))
        img = img.reshape(self.height,self.width)
        filePath = "%s%s%d_%s" % (self.folder,os.path.sep,s,self.filename)
        print("write to: %s" % filePath)
        scipy.misc.imsave(filePath, img)
        
    def work(self, input_items, output_items):
        imageByteCountTotal = 0
        if((self.folder != "")and(self.filename != "")):
                imageActive = input_items[1]==1
                imagePartAll = input_items[0][imageActive]
                imgSelect = input_items[2]
                imgSelectU = np.unique(imgSelect)
                for s in imgSelectU:
                    self.hasData[s] = True
                    pos = self.pos[s]
                    if(pos &lt; self.stopat):
                        imagePart = imagePartAll[imgSelect==s]
                        imageByteCount = imagePart.shape[0]
                        ishape = self.img[0].shape
                        if ishape[0] &lt; imageByteCount:
                            imageByteCount = ishape[0]
                            imagePart = imagePart[0:imageByteCount]
                        if imageByteCount &gt; 0:
                            self.img[s][pos:pos+imageByteCount] = imagePart
                            self.pos[s] += imageByteCount
                            pos = self.pos[s]
                            imageByteCountTotal += imageByteCount
                    if(pos &gt;= self.stopat):
                        if not self.wroteFile[s]:
                            self.writeFile(s)
        return input_items[0].shape[0]
    
    def finalize(self):
        print("destructor")
        for s in range(0,self.wroteFile.shape[0]):
            if not self.wroteFile[s] and self.hasData[s]:
                self.writeFile(s)
</value>
    </param>
    <param>
      <key>comment</key>
      <value>Edit this path to yours.</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>filename</key>
      <value>'test.bmp'</value>
    </param>
    <param>
      <key>folder</key>
      <value>'d:\Backups_and_projects'</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(328, 280)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>height</key>
      <value>image_height</value>
    </param>
    <param>
      <key>id</key>
      <value>epy_block_0</value>
    </param>
    <param>
      <key>max_num_files</key>
      <value>100</value>
    </param>
    <param>
      <key>width</key>
      <value>image_width</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('wavfile folder source', 'blk', [('wav_file_folder', "''")], [], [('0', 'float', 1), ('1', 'float', 1), ('2', 'int', 1)], '', [])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required to have default values!
"""
import os
from os import listdir
from os.path import isfile, join
import numpy as np
from gnuradio import gr
from gnuradio import blocks
import wave
import struct

WORK_DONE=-1

class blk(gr.basic_block):  # other base classes are basic_block, decim_block, interp_block
    def __init__(self, wav_file_folder=""):  # only default arguments here
        gr.basic_block.__init__(
            self,
            name='wavfile folder source',
            in_sig=[],
            out_sig=[np.float32,np.float32,np.int]
        )
        self.folder = wav_file_folder
        self.initialized = False
        self.pos = 0
        

    def general_work(self, input_items, output_items):
        size = output_items[0].shape[0]
        if not self.initialized:
            self.files = [f for f in listdir(self.folder) if isfile(join(self.folder, f))]
            filePath = "%s%s%s" % (self.folder,os.path.sep,self.files[self.pos])
            print("1: playing %s" % filePath)
            self.current_wav_source = wave.open(filePath,"rb")
            self.initialized = True
        resultChannels = None
        while True:
            if self.pos &gt;= len(self.files):
                return WORK_DONE
            if self.current_wav_source.tell() &lt; self.current_wav_source.getnframes():
                resultBin = self.current_wav_source.readframes(size)
                channels = self.current_wav_source.getnchannels()
                chunk_size = len(resultBin)//2
                resultAllChannels = np.array(struct.unpack("&lt;{0}h".format(chunk_size), resultBin),dtype=np.float32) / pow(2, 15)
                resultChannels = np.zeros((2,len(resultAllChannels) // channels))
                for c in range(0,channels):
                    resultChannels[c] = resultAllChannels[np.mod(np.arange(len(resultAllChannels)),channels)==c]
            else:
                self.pos += 1
                if(self.pos&lt;len(self.files)):
                    filePath = "%s%s%s" % (self.folder,os.path.sep,self.files[self.pos])
                    print("%d: playing %s" % (self.pos+1,filePath))
                    self.current_wav_source.close()
                    self.current_wav_source = wave.open(filePath,"rb")
                continue
            break
        outSize = resultChannels[0].shape[0]
        output_items[0][0:outSize] = resultChannels[0]
        output_items[1][0:outSize] = resultChannels[1]
        output_items[2][0:outSize] = (np.ones(resultChannels[0].shape,dtype=np.int)*(self.pos+1))
        return outSize</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(16, 152)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>epy_block_1</value>
    </param>
    <param>
      <key>wav_file_folder</key>
      <value>r"c:\Users\crazy\Downloads\noaa19\noaa19\noaa19"</value>
    </param>
  </block>
  <block>
    <key>rational_resampler_xxx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>Lines are transmitted at 2 per second, which equates to a 4160 words per second, or 4160 baud</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>decim</key>
      <value>48000</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>fbw</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(808, 248)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>id</key>
      <value>rational_resampler_xxx_1</value>
    </param>
    <param>
      <key>interp</key>
      <value>4160</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>taps</key>
      <value>[]</value>
    </param>
    <param>
      <key>type</key>
      <value>fff</value>
    </param>
  </block>
  <connection>
    <source_block_id>analog_const_source_x_0</source_block_id>
    <sink_block_id>blocks_int_to_float_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_mag_0</source_block_id>
    <sink_block_id>rational_resampler_xxx_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_float_to_char_0</source_block_id>
    <sink_block_id>epy_block_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_float_to_complex_1</source_block_id>
    <sink_block_id>blocks_complex_to_mag_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_float_to_uchar_0</source_block_id>
    <sink_block_id>epy_block_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_int_to_float_0</source_block_id>
    <sink_block_id>blocks_float_to_char_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_keep_m_in_n_0</source_block_id>
    <sink_block_id>epy_block_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>2</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_multiply_const_vxx_0_1</source_block_id>
    <sink_block_id>blocks_float_to_uchar_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_multiply_const_vxx_0_1_0</source_block_id>
    <sink_block_id>blocks_multiply_const_vxx_0_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>epy_block_1</source_block_id>
    <sink_block_id>blocks_float_to_complex_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>epy_block_1</source_block_id>
    <sink_block_id>blocks_float_to_complex_1</sink_block_id>
    <source_key>1</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>epy_block_1</source_block_id>
    <sink_block_id>blocks_keep_m_in_n_0</sink_block_id>
    <source_key>2</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>rational_resampler_xxx_1</source_block_id>
    <sink_block_id>blocks_multiply_const_vxx_0_1_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
</flow_graph>
